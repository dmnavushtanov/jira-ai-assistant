
ReadyforVerification: |
  You are validating an issue currently marked as "ReadyforVerification".
  Required information we want to exist is :
  1. **Swagger URL**
  2. **HTTP Method**
      - Exactly one of "POST", "GET", "PUT", or "DELETE" in uppercase.
  3. Some free text describing business logic of the api.Business logic should be meaningful not just some text
    - Example: "Gets endpoint that provides a list of physical and legal entities who participate in some way in 
      the system but are outside the main defined categories in people module 
      (agents, clients, offices, employees, insurers, banks, experts, creditors and sales channels). 
      The result contains details for their role according to the filter criteria provided in the query parameters."
  4. Parse the "Summary" and "Description." Ignore Jira-specific color tags or images unless they carry URLs or JSON blocks.
  {body_instructions}
  5. Return exactly one JSON object (no extra commentary) according to the schema below.
  
  **Output JSON Schema:**
    ```json
    {{
    "jira_key": "string or null",
    "is_valid": true | false,
    "errors": ["list of missing, malformed, or inconsistent fields"],
    "parsed": {{
      "swagger_url": "string or null",
      "method": "POST" | "GET" | "PUT" | "DELETE" | null,
      "api_url": "string or null",
        "request_body_exists": true | false,
        "request_body_valid": true | false,
        "response_body_exists": true | false,
        "response_body_valid": true | false,
        "request_body_example": {{ ... }} | null,
        "response_example": {{ ... }} | null,
    }},
    "jira_comment": "Natural-language summary of missing or malformed fields with specific example suggestions, appropriate to the development status. If the request body exists but is invalid, mention it."
    }}
    ```

  Issue Key: {key}
  Summary: {summary}
  Description: {description}

Backlog: |
  You are validating an issue currently marked as "Backlog".
  Required information we want to exist is :
  1. **Swagger URL**
  2. **HTTP Method**
      - Exactly one of "POST", "GET", "PUT", or "DELETE" in uppercase.
  3. Some free text describing business logic of the api.Business logic should be meaningful not just some text. 
    - Example: "Gets endpoint that provides a list of physical and legal entities who participate in some way in 
      the system but are outside the main defined categories in people module 
      (agents, clients, offices, employees, insurers, banks, experts, creditors and sales channels). 
      The result contains details for their role according to the filter criteria provided in the query parameters."
  4. Parse the "Summary" and "Description." Ignore Jira-specific color tags or images unless they carry URLs or JSON blocks.
  {body_instructions}
  5. Return exactly one JSON object (no extra commentary) according to the schema below.
  
  **Output JSON Schema:**
    ```json
    {{
    "jira_key": "string or null",
    "is_valid": true | false,
    "errors": ["list of missing, malformed, or inconsistent fields"],
    "parsed": {{
      "swagger_url": "string or null",
      "method": "POST" | "GET" | "PUT" | "DELETE" | null,
      "api_url": "string or null",
        "request_body_exists": true | false,
        "request_body_valid": true | false,
        "response_body_exists": true | false,
        "response_body_valid": true | false,
        "request_body_example": {{ ... }} | null,
        "response_example": {{ ... }} | null,
    }},
    "jira_comment": "Natural-language summary of missing or malformed fields with specific example suggestions, appropriate to the development status. If the request body exists but is invalid, mention it."
    }}
    ```

  Issue Key: {key}
  Summary: {summary}
  Description: {description}

InDevelopment: |
  You are validating an issue currently marked as "In Development".
  Required Fields (all must exist and be correct):
    1. **Swagger/OpenAPI URL**
      - Must be a link containing "swagger" or "openapi" (e.g., "swagger-ui" path or a .json spec).
    2. **HTTP Method**
      - Exactly one of "POST", "GET", "PUT", or "DELETE" in uppercase.
    3. **API Endpoint URL**
      - A full URL (starting with "http://" or "https://").
    4. **Request Body Example** (for POST/PUT)
      - A fenced code block with valid JSON.
      - If it’s a GET or DELETE, explicitly set `"request_body_example": null`..
        **Instructions:**
  - Parse the "Summary" and "Description." Ignore Jira-specific color tags or images unless they carry URLs or JSON blocks.
  {body_instructions}
  - Return exactly one JSON object (no extra commentary) according to the schema below.

  **Output JSON Schema:**
  ```json
  {{
    "is_valid": true | false,
    "errors": ["list of missing, malformed, or inconsistent fields"],
    "parsed": {{
      "swagger_url": "string or null",
      "method": "POST" | "GET" | "PUT" | "DELETE" | null,
      "api_url": "string or null",
        "request_body_exists": true | false,
        "request_body_valid": true | false,
        "response_body_exists": true | false,
        "response_body_valid": true | false,
        "request_body_example": {{ ... }} | null,
        "response_example": {{ ... }} | null
    }}
  }}
  ```
  Issue Key: {key}
  Summary: {summary}
  Description: {description}

Done: |
  You are an API documentation validator reviewing a JIRA ticket with status "Done." Everything should already be final. Perform a complete, strict validation of all fields and verify consistency (e.g., that the provided examples match what you see in Swagger).

  Required Fields (all must exist and be correct):
  1. **Swagger/OpenAPI URL**
     - Must be a link containing "swagger" or "openapi" (e.g., "swagger-ui" path or a .json spec).
  2. **HTTP Method**
     - Exactly one of "POST", "GET", "PUT", or "DELETE" in uppercase.
  3. **API Endpoint URL**
     - A full URL (starting with "http://" or "https://").
  4. **Request Body Example** (for POST/PUT)
     - A fenced code block with valid JSON.
     - If it’s a GET or DELETE, explicitly set `"request_body_example": null`.
  5. **Expected Response Example**
     - A fenced code block with valid JSON.
     - If there is no response body (e.g., DELETE returning 204), set `"response_example": null`.

  Additional Consistency Check (for "Done"):
  - If a Swagger URL is provided, fetch (or reference) the OpenAPI spec and confirm that:
    - The `"method"` and `"api_url"` exist in the spec's paths.
    - The `"request_body_example"` schema aligns with the spec's request schema.
    - The `"response_example"` schema aligns with the spec's response schema.
    - If any mismatch, list it under `"errors"`.

  **Instructions:**
  - Parse the "Summary" and "Description." Ignore Jira-specific color tags or images unless they carry URLs or JSON blocks.
  {body_instructions}
  - Because the status is "Done," every required field must be valid. If a field is missing or inconsistent, set it to `null` and list a clear error.
  - For consistency against Swagger, you may assume the model can "fetch" or "know" the spec details when you include the URL. If you cannot verify programmatically, simply state in errors "Swagger check could not be completed."
  - Return exactly one JSON object (no extra commentary) according to the schema below.

  **Output JSON Schema:**
  ```json
  {{
    "is_valid": true | false,
    "errors": ["list of missing, malformed, or inconsistent fields"],
    "parsed": {{
      "swagger_url": "string or null",
      "method": "POST" | "GET" | "PUT" | "DELETE" | null,
      "api_url": "string or null",
        "request_body_exists": true | false,
        "request_body_valid": true | false,
        "response_body_exists": true | false,
        "response_body_valid": true | false,
        "request_body_example": {{ ... }} | null,
        "response_example": {{ ... }} | null
    }}
  }}
  ```

  Issue Key: {key}
  Summary: {summary}
  Description: {description}

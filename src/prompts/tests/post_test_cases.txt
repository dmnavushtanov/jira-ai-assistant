  Generate two basic test cases for a POST API endpoint. First check if the provided description already contains test cases in the format below. If it does, reply only with `HAS_TESTS`. Otherwise create the new test cases. Each test case should include:
  1. A concise **name**.
  2. A short **description** of what it verifies.
  3. **Steps** to perform the check.
  4. The **expected result**.

  Use POST API endpoint in the examples. 

  Make them generic enough for any POST endpoint before implementation exists:
  - **Test Case 1: Success Path** — valid body returns 201 with created resource.
  - **Test Case 2: Client Error** — missing or invalid fields returns 400 with an error message.

If the summary includes a POST URL (e.g. `POST: people/v1/experts`), use it in the `Endpoint URL` field.
If the summary lacks details, still generate the generic test cases using the information above.

Summary: {summary}

  Output your answer as Markdown following exatly below example. Do not create multiple steps.Do not add '''json to the response.
  ```markdown
  **Test Case 1: Success - Create Resource**

  **Description:**  
  Valid request should return 201 and the created resource.

  **Endpoint URL:**  
  <the url of the endpoint under test>

  **Request Body:**
  // TODO: Add request body by developer once implemented 
  Body:
  {
    "id": "<generated-id>",
    "message": "Resource created successfully"
  }

  **Response:**  
  Status:200/201  
  Body: {}

  **Developer Notes / Test Outcome:**  
  [...fill after testing...]

  ----------------------------------------------------

  **Test Case 2: Client Error - Missing Field** 

  **Description:**  
  Missing a required field should return 400 with an error message.

  **Endpoint URL:**  
  <the url of the endpoint under test>

  **Request Body:**
  // TODO: Add invalide body by developer 
  Body:
  {
  //missing mandatory field
  }

  **Response:**  
  Status: 400  
  Body:
  {
    "error": "Missing required field"
  }

  **Developer Notes / Test Outcome:**  
  [...fill after testing...]
  ```



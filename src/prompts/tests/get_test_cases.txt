Generate two basic test cases for a GET API endpoint. First check if the provided description already contains test cases. If it does, reply only with `HAS_TESTS`. Otherwise create the new test cases. Each test case should include:
1. A concise **name**.
2. A short **description** of what it verifies.
3. **Steps** to perform the check.
4. The **expected result**.

Make them generic enough to apply to any GET endpoint before any implementation exists:
- **Test Case 1: Success Path** — valid request returns 200 and correct payload.
- **Test Case 2: Client Error** — malformed or missing parameters returns 400 with an error message.

If the summary includes a GET URL (e.g. `GET: people/v1/experts`), use it in the `Endpoint URL` field.
If the summary lacks details, still generate the generic test cases described above.

Summary: {summary}

  Output your answer as Markdown following exatly below example. Do not create multiple steps.Do not add '''json to the response.
Markdown array of objects, for example:
```markdown
**Test Case 1: Success - Retrieve Resource**

**Description:**  
Valid request should return 200 and the requested resource.

**Endpoint URL:**  
`<INSERT ENDPOINT HERE>`

**Request Query Parameters:**
// TODO: Add parameters once known
?resourceId=<known-id>

**Response:**  
Status: 200  
Body:
{
  "id": "<known-id>",
  "name": "...",
  "data": "..."
}

**Developer Notes / Test Outcome:**  
[...fill after testing...]

----------------------------------------------------

**Test Case 2: Client Error - Invalid Parameter**

**Description:**  
Missing or malformed parameters should return 400 with an error message.

**Endpoint URL:**  
`<INSERT ENDPOINT HERE>`

**Request Query Parameters:**
// TODO: Add malformed input
?resourceId=

**Response:**  
Status: 400  
Body:
{
  "error": "Missing or invalid resourceId"
}

**Developer Notes / Test Outcome:**  
[...fill after testing...]
```

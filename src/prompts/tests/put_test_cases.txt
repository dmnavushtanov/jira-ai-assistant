Generate two basic test cases for a PUT API endpoint.
Each test case should include:
1. A concise **name**.
2. A short **description** of what it verifies.
3. **Steps** to perform the check.
4. The **expected result**.

Make them generic enough for any PUT endpoint before implementation exists:
- **Test Case 1: Success Path** — valid update returns 200 with updated resource.
- **Test Case 2: Not Found** — updating a missing resource returns 404.

If the summary includes a PUT URL (e.g. `PUT: people/v1/experts`), use it in the `Endpoint URL` field.
If the summary lacks details, still generate the generic test cases described above.

Summary: {summary}

  Output your answer as Markdown following exatly below example. Do not create multiple steps.Do not add '''json to the response.
```markdown
**Test Case 1: Success - Update Resource**

**Description:**  
A valid PUT request should update the existing resource and return a 200 status with the updated content.

**Endpoint URL:**  
`<INSERT ENDPOINT HERE>`

**Request:**  
PUT /your/endpoint/<known-id>  
Body:
{
  "name": "Updated Name",
  "status": "active"
}

**Response:**  
Status: 200  
Body:
{
  "id": "<known-id>",
  "name": "Updated Name",
  "status": "active"
}

**Developer Notes / Test Outcome:**  
[...fill after testing...]

----------------------------------------------------

**Test Case 2: Not Found - Update Missing Resource**

**Description:**  
A PUT request to update a resource that does not exist should return a 404 error.

**Endpoint URL:**  
`<INSERT ENDPOINT HERE>`

**Request:**  
PUT /your/endpoint/<nonexistent-id>  
Body:
{
  "name": "Any Name",
}
```
